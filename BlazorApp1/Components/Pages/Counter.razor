@page "/counter"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<ButtonTwo 
    OnClick="IncrementCountAsync"
    CssClass="btn btn-primary"
    Icon="⏳"
    IsLoading="@isLoading"
>
    Cargar lento
</ButtonTwo>
<MyButton OnClick="IncrementCount">Prueba props</MyButton>
<ButtonTwo 
    OnClick="IncrementCount"
    CssClass="btn btn-warning"
    Icon="➕"
>
    Aumentar
</ButtonTwo>

<ButtonTwo 
    OnClick="DecrementCount"
    CssClass="btn btn-danger"
    Icon="➖"
>
    Decrementar
</ButtonTwo>
<ButtonTwo
    OnClick= "ResetCount"
    CssClass="btn btn-secondary ms-2"
    Disabled="@(currentCount == 0)"
    Icon="🔄"
>
    Reiniciar
</ButtonTwo>



<ul class="mt-3">
    @for (int i = 0; i < currentCount; i++)
    {
        <li>Item @i</li>
    }
</ul>

<div class="mt-3 p-3 border border-primary" > <!-- Azul -->
    <p>text3</p>
    <input @bind="text3" @bind:event="oninput" @bind:after="Search" />
    <button class="ms-2 btn btn-outline-secondary" @onclick="ClearText3">Clear</button>
    <p class="mt-2">@text3</p>
    <p> @searchResult</p>
</div>

<div class="mt-3 p-3 border border-success"> <!-- Verde -->
    <p>text1</p>
    <input @oninput="OnInput" />
    <p>@text</p>
</div>

<div class="mt-3 p-3 border border-danger"> <!-- Rojo -->
    <p>text2</p>
    <input @onchange="OnChange" />
    <p>@text2</p>
</div>

<div style="background-color: lightblue; margin-top: 2rem; padding: 1rem;" @onmouseover="MouseOver" @onmouseout= "MouseOut">
    @divText
</div>



@code {
    private int currentCount = 0;
    string text = "";
    string text2 = "";
    string text3 = "";
    string searchResult = "";

    private bool isLoading = false;

    string divText = "Mouse out";

    private void IncrementCount() => currentCount++;

    private void DecrementCount() => currentCount--;

    private void ResetCount() => currentCount = 0;

    async Task IncrementCountAsync()
    {
        isLoading = true;
        await Task.Delay(1000); // Simulate some async work
        currentCount++;
        isLoading = false;
    }
    private void OnInput(ChangeEventArgs e) => text = (string)e.Value!;
    private void OnChange(ChangeEventArgs e) => text2 = (string)e.Value!;
    private void MouseOver(MouseEventArgs args) => divText = "Mouse over";
    private void MouseOut(MouseEventArgs args) => divText = "Mouse out";
    private void OnChangeClear(ChangeEventArgs args)
    {
        text3 = (string)args.Value!;
    }
    private void OnClick(MouseEventArgs args)
    {
        text = "";
    }
    private void ClearText3()
    {
        text3 = "";
    }
    async Task Search()
    {
       searchResult = "Buscando...";
        await Task.Delay(2000); // Simulate some async work
        searchResult = $"Resultado de la búsqueda: {text3}";
    }
}
