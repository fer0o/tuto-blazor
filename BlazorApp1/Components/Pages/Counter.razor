@page "/counter"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCountAsync">Click me</button>
<MyButton OnClick="IncrementCount">Prueba props</MyButton>
<ButtonTwo 
    OnClick="IncrementCount"
    CssClass="btn btn-warning"
    Icon="➕"
>
    Aumentar
</ButtonTwo>

<ButtonTwo 
    OnClick="DecrementCount"
    CssClass="btn btn-danger"
    Icon="➖"
>
    Decrementar
</ButtonTwo>
<ButtonTwo
    OnClick= "ResetCount"
    CssClass="btn btn-secondary ms-2"
    Disabled="@(currentCount == 0)"
    Icon="🔄"
>
    Reiniciar
</ButtonTwo>



<ul class="mt-3">
    @for (int i = 0; i < currentCount; i++)
    {
        <li>Item @i</li>
    }
</ul>
<div class="mt-3">
    <input @oninput="OnInput">
    <p>@text</p>
</div>
<div class="mt-3">
    <input @onchange="OnChange">
    <p>@text2</p>
</div>

<div style="background-color: lightblue;" @onmouseover="MouseOver" @onmouseout= "MouseOut" >
@divText
</div>



@code {
    private int currentCount = 0;
    string text = "";
    string text2 = "";

    string divText = "Mouse out";

    private void IncrementCount() => currentCount++;

    private void DecrementCount() => currentCount--;

    private void ResetCount() => currentCount = 0;

    async Task IncrementCountAsync()
    {
        await Task.Delay(1000); // Simulate some async work
        currentCount++;
    }
    private void OnInput(ChangeEventArgs e) => text = (string)e.Value!;
    private void OnChange(ChangeEventArgs e) => text2 = (string)e.Value!;
    private void MouseOver(MouseEventArgs args) => divText = "Mouse over";
    private void MouseOut(MouseEventArgs args) => divText = "Mouse out";
}
